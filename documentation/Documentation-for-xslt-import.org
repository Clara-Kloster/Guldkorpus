#+TITLE: Documentation for XML import into MenotaB using XSLT
#+AUTHOR: Beeke Stegmann 
#+OPTIONS: toc:t
#+LANGUAGE: english
#+LATEX_HEADER: \cohead{{\scshape Documentation for XML import into MenotaB using XSLT}}
#  #+DATE: \today{}
** General information
This is the documentation for the XML import into MenotaB using one XSLT
stylesheet (=XML-to-MenotaB-transform.xsl=), which, when run on an XML
file, produces text output in the format that is expected by MenotaB.

The XSLT works both on pure TEI P5 XML and Menotic XML according to
Menota Handbook v.2 and v.3. 
Please note, however, that the Menotic elements <me:textSpan>, <me:all> 
and <me:ass> are currently not processed by the stylesheet.

It expects the most common XML elements and attributes. Special elements
or variant forms of encoding which might validate but are not
recommended by the standards (such as non-standardized attribute values)
might not be taken into consideration.
The stylesheet expects all words to be wrabbed in =<w>= elements
and also requires =<pb>= abd =<lb>= element with =@n= attributes
to mark the page and line breaks in the artefact being transcribed.

The XSLT only works on a valid XML file that is validated against the
TEI-namespace (and optionally also the Menota namespace). In other
words, the =<TEI>= element is expected as the outermost element and it
needs to have the attribute @xmlns="[[http://www.tei-c.org/ns/1.0]]".
For Menotic XML, the namespace @xmlns:me="[[http://menota.org/ns/1.0]]"
can be added.

The XSLT produces output in pure text format which can be understood by
org-mode.

** Document structure
The output document follows the org-mode syntax and includes some raw
XML-code. First, a line for an internal identifier is produced (here called "main text number"),
 i.e. a running number within a given
 corpus or a comparable project specific identifier. This main text number
is prefixed with one asterisk.
PLEASE NOTE: Since the XSLT cannot automatically assign this number 
from a sinlge XML-imput file, this number needs to be set manually before
every transformation. See "(TEXT-NUMBER)" in line 9 of the XSLT file.

Next, a line with 17 fields (separated by pipe characters)
containing meta information is printed in the output document (see example a).
An additional and very similar line for meta data is inserted at the beginning 
og each text or chapter (expected to be marked up with =<div>= 
 as direct child of =<body>=) (see example b).[fn::Note that this requires all the markup,
 including =<pb>=, =<lb>= and =<figure>=, to be nested within the respective outermost =<div>= element.] 
That means if more than one text or chapter
are indicated in the XML file, the output will be seperated into 
multiple sections. Each section starts with a line giving the chapter count as natural number (and 
potentially the chapter title in parantheses), prefixed by two asterisks. The subsequent line 
is the mentioned meta data line for that chapter/text. 

#+CAPTION: (a) Example of meta data line for entire file
#+BEGIN_SRC orgmode
    |   1 | 2 | 3 |           4 |    5 | 6 |                                     7 | 8 | 9 | 10 | 11 | 12 | 13 | 14 | 15 | 16 | 17 |
    | :m: | 1 |   | AM 421 12mo | 1514 |   | Den Arnamagnæanske Samling, København |   |   |    |    |    |    |    |    |    |
#+END_SRC

#+CAPTION: (b) Example of meta data line for chapter/text
#+BEGIN_SRC orgmode
    |   1 |   2 |               3 |           4 |    5 | 6 |                                     7 | 8 | 9 | 10 | 11 | 12 | 13 | 14 | 15 | 16 | 17 |
    | :m: | 1:2 | Hil dig, Maria  | AM 421 12mo | 1514 |   | Den Arnamagnæanske Samling, København |   |   |    |    |    |    |    |    |    |
#+END_SRC

The meta data line is identified by =:m:= in the first field.

The second field is always holds the main text number. In case of meta data lines for
multiple texts of chapters, the subnumbers are added to this separated by a colon.
The subnumber is generated automatically based on the position of the relevant =<div>=
as child of =<body>=.

The third field is reserved for a text or chapter title (only populated for meta data lines for chapters).
The stylesheet reads in the contents of a potential =<head>= element as child of the relevant =<div>=.

The fourth field gives the identifier of the artefact in question
 (i.e. either the shelfmark or any other ID specified in =<idno>= within
 =<msIdentifier>= or, if not encoded, the contents of =<titleStmt>=).

The fifth field holds the year(s) of origin of the source. If present the information
is read in from =<origDate>=, otherwise from a potentially present =<date>= element in =<origin>=.
 
The sixth field is reserved for the day and month of origin, if known and encoded (e.g. for charters). 
If present the information is read in from =<origDate>=, otherwise from a potentially present =<date>= element in =<origin>=,
where it is expected to be in ISO-format, i.e. YYYY-MM-DD. The output has the format MM-DD.

The seventh field gives the city and repository where the artefact is housed (separated by a comma).
The data is expected to be encoded as =<settlement>= and  =<repository>= within
=<msItentifier>= in the XML.

The remaining fields are not generally assigned but can be used for various project specific information.

Following each meta data line the output file has a section for notes (two or three asterisks).
The first note section of the file (two asterisks) has subsections for
 the XML header and potentially information on facsimile mapping as well as
the front and/or back matter. These subsections simply copy over the raw XML from the input 
file and print the code within an XML source code block.[fn:: Currently the transformation adds some
unnecessary attributes here if the Menota schema is used.]
All XML files are expected to have a
=<teiHeader>=, but the other subsections are only produced in cases where
=<facsimile>=, =<front>= and =<back>=, respectively, are present. 

Finally, the output file reproduces the transcription (three asterisks) for each text or chapter 
(depending on the markup of the XML file). The transcription is transformed into
MenotaB format: Each line has 17 fields (separated by pipe characters)
that are allocated to varying values or types of information
depending on the nature of the encoded element (e.g. if it is a word,
a name etc.). The different elements, their expected
XML-encoding, and how the values and attributes are converted and
represented in the 17 fields of each line in the output are described
below. Each transcription (expected to be found inside =<div>= that is a direct child of =<body>=, iteself a
child of =<text>=) is processed and returned within enclosing lines marked with
=:s:= and =:e:= for "start" end "end".


*** Regular words, punctuation characters and numbers
In general, words that are encoded using =<w>= in the XML file are
imported in the following way (c = Menotic XML; d = TEI P5; e = a
fictive example with even more information: output only). The 
output code in the examples also shows an aiding line above the proper code that
 specifies which kind of information is expected in the respective fields
for words, punctuation and numbers. 

Please note: For words with additional markup for e.g. emendations or defects
additional rules may apply (see below). Punctuation characters
(encoded in XML either as =<pc>= or =<me:punct>=) and numbers (encoded in XML as
=<num>=) are treated in the same way as words (as far as applicable),
but with a different value in the first field (= type).

#+CAPTION: (c)
#+BEGIN_SRC xml
    <w me:msa="xVB fF tPT mIN p3 nS vA iST" lemma="gefa">
        <choice>
            <me:facs>gaꝼ</me:facs>
            <me:dipl>gaf</me:dipl>
            <me:norm>gaf</me:norm>
        </choice>
    </w>
#+END_SRC

#+BEGIN_SRC orgmode
    |    1 |      2 |      3 |                           4 |     5 |     6 |    7 |    8 |                 9 |               10 |                11 |     12 |       13 |     14 |     15 |       16 |                 17 |
    | type | lemma1 | lemma2 | msa                         | norm1 | norm2 | dipl | facs | word/image nummer | palaeogr. annot. | graphophon. annot. | notes | language | extra1 | extra2 | spacing? | position in source |
    | w    |        | gefa   | xVB fF tPT mIN p3 nS vA iST |       | gaf   | gaf  | gaꝼ  |            000001 |                  |                    |       |          |        |        |          | 168r-01            |
#+END_SRC


#+CAPTION: (d)
#+BEGIN_SRC xml
    <w n="14" lemma="menneske" type="sb">
        <choice>
            <reg>mennesken</reg>
            <orig>me<choice><am>̅</am><ex>n</ex></choice>níſken</orig>
        </choice>
    </w>
#+END_SRC

#+BEGIN_SRC orgmode
    |    1 |      2 |        3 |   4 |     5 |        6 |           7 |        8 |                 9 |               10 |                  11 |    12 |       13 |     14 |     15 |       16 |                 17 |
    | type | lemma1 | lemma2   | msa | norm1 | norm2    | dipl        | facs     | word/image nummer | palaeogr. annot. | grapho-phon. annot. | notes | language | extra1 | extra2 | spacing? | position in source |
    | w    |        | menneske | sb  |       | menneske | me(n)níſken | men̅íſken |            000023 |                  |                     |       |          |        |        |          | 023ra-10           |
#+END_SRC


#+CAPTION: (e)
#+BEGIN_SRC orgmode
    |    1 |      2 |      3 |            4 |             5 |         6 |     7 |    8 |                 9 |               10 |                  11 |    12 |       13 |     14 |     15 |       16 |                 17 |
    | type | lemma1 | lemma2 | msa          | norm1         | norm2     | dipl  | facs | word/image nummer | palaeogr. annot. | grapho-phon. annot. | notes | language | extra1 | extra2 | spacing? | position in source |
    | w    | ég     | vér    | xPE p1 nP cN | vér           | vér       | W(ær) | W͛   |            000001 |                  | {W:v}{͛:[ér,ǽr]}    |       | oic      |        |        | =        |            168-01  |
#+END_SRC

In all three examples, the first field (= type) takes the value =w= for "word"
(which is also employed when the XML markup uses =<num>= ). 
When the =<w>= in question is encoded as a
descendant of =<gap>= the entire word is assumed to be
lost and the value =L= is printed instead. For punctuation characters
the first field takes =p=.

The second and third field are for lemma1 and lemma2, which are read
from @lemma on =<w>= if encoded (and if present
@me:orig-lemma). For =<num>= it is tested if it has a child =<w>= with the relevant 
markup. If only one lemma is present on =<w>=, it is expected to be
@lemma (as is the case in both a and b), and its value is read into the
third field (= lemma2), while the second field is left empty. If an
additional lemma is encoded, i.e. @me:org-lemma, its value is read into
the second field (= lemma1) as can be seen in example (c). If there are
any homonymous lemmata encoded in any of the two attributes (using a
pipe character as a separator), that character is replaced by a broken
bar.
If =<num>= does not have a child =<w>= with information on the lemma encoded
the value of a potential attribute =@value= on =<num>= is read in. 

The fourth field (= msa) is populated with the morphosyntactic
annotation of =<w>= if present. If so, the value of the attribute @me:msa is
imported. Otherwise, the value of a potentially present attribute @type
on either =<w>= is read in. If none of these are encoded, the field is left empty.
If =<num>= does not have a child =<w>= with information on morphpsyntactitc analysis 
the value of a potential attribute =@type= on =<num>= is converted
in the following way:
='ordinal'= is printed as =xNO=
='cardinal'= is printed as =xNA=
='fraction'= is printed as =xNF=
='percentage'= is printed as =xNH=.
If not no =@type= attribute is present, the default is =xNA=.

The fifth and sixth field (= norm1 and norm2) contain the normalized
form(s) of the word. If only one normalized form is present, it is
imported into the sixth field (= norm2). A second or alternative
normalized form may be placed in the fifth field (= norm1). For Menotic
XML (a), the value is taken from the element =<me:norm>=, for TEI P5 XML
(b) it is taken from =<reg>=. All descending elements of =<me:norm>= or
<reg> are processed (see below). If the word in question is marked up as
a descendant of =<unclear>=, =<supplied>=, =<add>=, =<del>=, =<sic>=,
=<corr>= or =<surplus>= / =<me:suppressed>= (or =<me:expunged>=) the
relevant editorial markup is automatically inserted around the word
form. The characters used are the same as for changes or emendations
within a word (see below).

The seventh field (= dipl) is populated with the diplomatic word form.
In Menotic XML (a) it is read from the element =<me:dipl>=, in TEI P5
XML (b) from =<orig>= with the contents of all descendant =<ex>=
elements (displayed in parentheses), while the contents of =<am>= is
suppressed. All other descending elements of =<orig>= and =<me:dipl>=
are processed as normal. If the word in question is marked up as a
descendant of =<unclear>=, =<supplied>=, =<add>=, =<del>=, =<sic>=,
=<corr>= or =<surplus>= / =<me:suppressed>= (or =<me:expunged>=) the
relevant editorial markup is automatically inserted around the word
form. The characters used are the same as for changes or emendations
within a word (see below). If the input contains a single-level
transcription, in which the text is simply transcribed within =<w>=
(i.e. without any =<choice>= and respective child elements, the
transcription is assumed to be on the diplomatic level and therefore
read into the seventh field. In case there are both a =<sic>= and
=<corr>= form encoded for a word in a single-level transcription the
corrected form is printed in the current field (whereas the sic-form is
given in the eighth field).

The eighth field (= facs) is populated with the facsimile word form. In
Menotic XML (a) it is read from the element =<me:facs>=, in TEI P5 XML
(b) from =<orig>= with the contents of all descendant =<am>= elements,
while the contents of =<ex>= is suppressed. All other descending
elements of =<orig>= and =<me:facs>= are processed as normal. If the
word in question is marked up as a descendant of =<unclear>=,
=<supplied>=, =<add>=, =<del>=, =<sic>=, =<corr>= or
=<surplus>= / =<me:suppressed>= (or =<me:expunged>=) the relevant
editorial markup is automatically inserted around the word form. The
characters used are the same as for changes or emendations within a word
(see below).

The ninth field (= word/image nummer) is populated automatically, counting all
=<w>=, =<pc>= (or =<me:punct>=) and =<num>= elements in the =<body>=. The output
is given as a six digit number. If @n is encoded for =<w>= in the input file it is not
considered. If the actual order of words in an artefact differs from the
logical order (or the order it should be read in) such as in discontinuous rubrics, the reordering of
the words in question is noted in this field as well. The XML input is expected to follow
the logical order of words, which is the one counted by the main number in this field. 
(The expected XML markup for reordered text with regards to rubrics is the markup proposed in the guidelines of the Menota Handbook v.3 with 
multiple =<lb>= milestones that carry different =@rend= attributes
to indicate the physical rendition of the part of the lines
in question.)
In order to indicate that a reordering has occurred and the physical place is different,
an additional six digit number is supposed to be shown in parentheses behind the first, showing the
 alternative, physical place. Note, however, that the XSLT transfortmation simply printes the value of =@rend= in
parantheses and this number is to be corrected in elisp.*[fn:: Neither 
of these counts consider words spanning more than one line, e.g. at the end of 
a line, twice (i.e. the count is not based on physical images) but rather counts nodes in the XML file.
Later this is fixed by an elisp function which overwrites the erroneous numbers. 
ASK: husk også at ord, der indeholder et =<lb>= med =@rend= ikke får paranteserne
indlagt (fordi funktionen går på hele ord). Disse ord er dog markeret med en særlig
tegnkombination i transskriptionsfelterne, hvor =<lb>= elementet bliver
transformeret til broken pipe character + @rend + værdien af rend + broken pipe
 character i stedet for en enkel broken pipe character. ]*

For cases of transposition of words, that is indicated in the manuscript, the first (six digit) number indicates the corrected
place of the word in question. A second number is supposed to be printed in round brackets, indicating
the original ordering. These numbers are single digits that count separately within each enclosing set of lines 
for transposition (marked =ts=). Since the stylesheet does not produce these numbers for the original order
automatically, it prints either the original or desired order above the relevant opening line for the transpostition and expects 
post-processing to generate the right numbers.[fn:: For XML input according to Menota, the original order of words is indicated by means of a separate line per word that is prefixed with
ORDER OF WORDS PRIOR TO TRANSPOSITION, which are expected to be substituted. In the word counter in the line for
each individual word has the space holder ADD-ORIGINAL-NUMBER is printed. For XML input according to TEI the desired order of words
is indicated by such additional lines before the opening line for the transposition, but these lines are prefixed by DESIRED ORDER OF WORDS ACCORDING TO
TRANSPOSITION. They give the value =@target= attributes on =<ptr>= elements --in that order-- in a relevant =<transpose>=
element anywhere in the document. These numbers are matched by the values of individual @xml:id attributes for every element to which 
the transposition applies. These values are printed in square brackets behind the word
counter behind for each word and expected to be replaced.] 


The tenth field (= paleograph. annot.) reads in palaeogaphic
information. More specifically, it imports the contents of =<me:pal>= if
present. In addition, if initials are encoded using =<c>=
or =<hi>=, information from their attributes is imported into this field.

Potential attributes on =<hi>= have not been standardized and can thus only
be read in and printed as they appear, and multiple attribute values will be
 separated by a broken pipe characte.

In case =<c>= is marked up with the standardized attributes for initials according to the 
Menota Guidelines v. 3.0 these are treated in the following way (otherwise they are read in like attributes on =<hi>=):
The encoded details on initials are printed in curley brackets that always start with a specification
of which letter(s) of the word is/are described or if the details concern the entire word.
This first information is prefixed by "l" (for "location") and counts letters within the 
respective word, e.g. ={l1}= for the first letter and ={l1-2}= for the first two letters. 
Alternatively ={lW}= can be used for the entire word.[fn::The XSLT expects initials to be
located a the beginning of a word with a maximum of two =<c>= elements with =@type=
of the value ='initial'= per word. If several letters have the same characteristics they can
be treated in a common =<c>= element.]
A colon is printed following the specification of the location,
after which one or multiple values may be listed, separated by white spaces. 
The individual values are prefixed by characteristic letters denoting the kind of 
information.

- The value of any present =@type= of =<c>= is prefixed by =t= and converted so that 
 ='initial'= becomes =tIN= in 
MenotaB and ='noInitial'= becomes =tNO=.

- The value of any present =@subtype= of =<c>= is prefixed by =b= and converted so that
 ='opening'= is given as =bOP=, ='text'= as =bTE=, ='chapt'= converts into =bCH=, ='para'=
into =bPa= and ='littNot'= is printed as =bLI=.

- The value of any present =@style= of =<c>= is read in and printed as is, meaning that 
the prefix =u= continues to stand for "up", =d= for "down", =mu= for "margin up", =md=
for "margin down" and =c= for "colour".

- The value(s) of any present =@rend= of =<c>= is prefixed by =r= and converted so that 
='historiated'= is converted into =rHi=, ='foliate'= into =rFo=, ='pen-flourished'=
is given as =rPf=, ='penwork'= as =rPw=, ='interlaced'= as =rIl=, ='puzzle'= as =rPu=,
='zoomorphic'= as =rZo=, ='dragon'= as =cDr=, ='inhabited'= as =rIh=,
='lombard'= as =rLo=, ='versal'= as =rVe=, ='colourStroked'= as =rCs=,
 ='guideLetter'= as =rGl=, ='other'= as rOt=. 
If =@rend= has multiple values separated by white spaces, these are reproduced in the 
same order, but with underscores in between the shortened codes, e.g. =rPu_Pf= for a puzzle initial
with pen flourish.

The actual contents of =<c>= or =<hi>= is 
reproduced in the fields for the facsimile (and potentially diplomatic)
form of the word according to the XML encoding.

The eleventh field (= grapho-phon. annot.) does at present not read in
anything from the XML input.

The twelfth field (= notes) imports the contents of any =<note>=
elements that might be associated with a =<w>=. Please note that only
=<note>= elements /within/ =<w>= are processed correctly, while
potential =<note>= elements placed immediately following or elsewhere
are not considered.

The thirteenth field (= language) holds the language key for the word.
If any ancestor element (e.g. =<div>=, =<p>=, =<seg>=) has an attribute
@xml:lang, the attribute's value of the closest element with such an
attribute is inserted. Otherwise, the stylesheet checks for the presence
of the element =<langUsage>= in the header and reads out any descendant
elements =<language>= for their respective @ident. If several
=<language>= elements are present, the different values of @ident are
imported and separated by white space.

The fourteenth and fifteenth field (= extra1 and extra2) are additional
fields for project specific information. Currently, the fourteenth field
(= extra1) is used for reading in information on multiple morphemes if
encoded in the XML. The information from the separate =<m>= elements, as
in the example below, is represented by the same number of pairs of
curly brackets that contain a mapping of the contents to the value of
@baseform separated by a colon (see example).


#+CAPTION: Example of XML with =<m>= elements
#+BEGIN_SRC xml
    <w me:msa="xNP gM nS cD sI" lemma="Iðavǫllr">
                                <m baseForm="ið">Iða</m>
                                <m baseForm="vǫllr">vǫllr</m>
                                <choice>
                                    <me:facs>ıða uellı</me:facs>
                                    <me:dipl>iða uelli</me:dipl>
                                    <me:norm>Iðavelli</me:norm>
                                </choice>
                            </w>
#+END_SRC

#+BEGIN_SRC orgmode
    | {ið:Iða}{vǫllr:vǫllr} |
#+END_SRC

In case of an additional attribute =@type= (e.g. with the value of
"prefix", "root" or "suffix"), this value is added at the end, separated
by another colon.

The sixteenth field (= spacing?) holds information on two (or more)
words, numbers or punctuation characters that are written together in
the original. If an element =<seg>= with an attribute =@type= and the
value =nb= or =enc= is present in the transcription enclosing the words
in question, the XSL stylesheet inserts equal signs or not-equal signs, respectively.
For the first word
of the segment either one equal sign or a non-equal sign is printed
 and an additional equal sign/non-equal sign for every following. E.g. if
three words are written together in the original and encoded in the XML
using =<seg>= with =@type= of the value =nb=, the output will show a single equal sign in the
sixteenth field of the first word, two equal signs in the sixteenth
field of the second word, and three equal signs in the respective field
for the third word.
*[Note: The number of equal signs (or non-equal signs) in case of three or more element is to be changed in the elisp handling in such a way that the last element of such a 
sequence always has two equal signs, while the intermediate ones can have more]*

The seventeenth and final field (= position in source) is automatically
populated with the information of both the page/folio and line
information of where the word is located based on the present encoding
of =<pb/>=, =<lb/>= and potentially =<cb/>= and the values of their
respective =@n=. Any markup for page breaks, line breaks or column
breaks found in editions (expected to be marked with @type="ed" or @ed)
are ignored.

For =<pb/>= =@n= is expected to contain a string of up to four
characters, i.e. usually a number of one to three digits
 combined with r or v for
/recto/ or /verso/; for =<lb/>= =@n= is expected to
contain a single number (no letters!) of a maximum of two digits; for
=<cb/>= the value of @n is expected to be a single letter. The output
format is =[0-9][0-9][0-9][rv]-[0-9][0-9]= for folio/page-leaf (e.g.
023r-09). In case the primary source is written in more than one column
and this in encoded in the XML using =<cb/>=, the letter of the column
is added to the end of the folio/page information (e.g. 023ra-07). If a
word is written on more than one line and this fact is encoded with a
=<lb/>= (and potentially also =<pb/>= or =<cb/>=) inside the =<w>= in
question, the seventeenth field also reads in the location of the second
and potentially further parts of the word. The format for the position
is always the same; the multiple elements are separated by an m-dash
(e.g. 123v-09---123v-10).

For any words, numbers or punctuation that are childen of =<figure>=, i.e. transcribed
from illuminations, an additional letter "f" is added in front of the line number 
(which is expected to be marked-up as =@n= of =<lb>= inside of =<figure>=). It is
expected to count (manuscript) lines in illuminations per page, starting with 1.
 For any words, numbers or punctuation that are part of larger
additions that have nested =<lb>= elements, an additional letter "a" is added in front of the line number.
Again, the markup in the XML-input is expected to count
 line numbers separately for those additions (per page).

*** Page breaks, line breaks and column breaks (including hyphenation)
Markup for page breaks, line breaks, column breaks
 is treated differently depending on whether the milestone
elements =<pb>=, =<lb>= and =<cb>=, are found outside of words or
within. In the former case, the milestone elements are simply converted
into a line in the output as shown in the example.

#+CAPTION: Example of =<lb/>= in XML input (with its preceding =<pb/>= and =<cb/>=)
#+BEGIN_SRC xml
    <pb n="126r" type="ms"/><cb n="a"/>
    .....
    <lb n="15" type="ms" rend="3"/>
#+END_SRC

#+BEGIN_SRC orgmode
    | 1  |        2 |  3 |  4 | 5 | 6 | 7 | 8 | 9 | 10 | 11 | 12 | 13 | 14 | 15 | 16 | 17 |
    | lm | 126ra-15 |    |  3 |   |   |   |   |   |    |    |    |    |    |    |    |    |
#+END_SRC

The first field of that line holds the type designation:

-  =pm= for a page break found in a manuscript
-  =pe= for a page break in a relevant edition (expected to be specified
   with either @ed or @type="ed" if encoded)
-  =lm= for a line break in a manuscript
-  =le= for a line break in a relevant edition (expected to be specified
   with either @ed or @type="ed")
-  =cm= for a column break in a manuscript
-  =ce= for a column break in a relevant edition (expected to specified
   with either @ed or @type="ed")
-  =gb= for a gathering break in a manuscript
-  =hs= for a hand shift in a manuscript

The second field holds information about the place, i.e. the number of
the break in question. For =<pb/>= the number is read from its =@n=,
which is expected to contain a string of up to four characters, i.e.
usually a number of one to three digits combined with 'r' or 'v' for
 /recto/ or /verso/
for a page break in a manuscript or a number of up to four digits for a
page break in an edition. If a format with less numbers are encoded, the
stylesheet automatically prepends zeros to produce a string of four
characters. For =<cb/>= (if present) the number is a combination of the
preceding =<pb>= and its own =@n= attributes, the latter being expected
to contain a single letter. The four digits from the page break and the
letter from the column break are printed without any additional syntax
(e.g. "126ra"). For =<lb/>= the number is a combination of the preceding
=<pb>=, potentially =<cb>=, and its own =@n= attributes, the latter
being expected to contain a single number (no letters!) of a maximum of
two digits. The folio/page number (potentially including the column
number) and the line number are separated in the output by a hyphen if
the line break is found in a manuscript (e.g. 023r-09 or 023rb-10) and
by a dot if the line break is from an edition (e.g. 0126.12). Line
numbers below 10 are automatically rendered with a preceding zero. In
case line breaks, page breaks and potentially column breaks from both
the manuscript and an edition are encoded, only preceding milestone
elements of the same type are considered.

The third field reads in any value of a potentially present =@facs=
attribute (which is e.g. common for =<pb>= if there is a mapping to
facsimile images.

The fourth field reads in any value of a potentially present =@rend=
attribute, which is common for =<lb>= if the logical order of
the words does not agree with the physical order (in this case <lb>
is expected to be encoded for each part of the line, with the same 
value of =@n=, but the
multiple milestone elements are distinguished by a counting =@rend=).

The remaining fields of the output line are left empty.

If page breaks, line breaks or column breaks occur within a word the
exact location of the milestone element is retained by means of
inserting the following characters: 

- ‖ (double pipe character) for page breaks in a manuscript 
- ⫽ (double forward slashes (i.e. &dblsol;)) for a page break in an edition
- ¦ (a single broken pipe character) for a line break in a manuscript 
-  ⁄ (a single &fracsol;) for a line break in an edition
- ⸩ (double closing parentheses (i.e. &rdblpar;)) for a column break in a manuscript 
- ⸨ (double opening parentheses (i.e. &ldblpar;)) for a column break in an edition

In case a line break element also has a =@rend= attribute, because the 
logical order differs from the physical, the stylesheet prints
a broken pipe character + '@rend' + the value of the rend-attribute +
a broken pipe character.
*[ This additional markup for =<lb>= in words with @rend is expected to be removed after handling the text in elisp,
 as the word/image number field will contain that information.]*  

In case of hyphenation at a line break the stylesheet simply reproduces
any hyphens that are present in the XML as present in the manuscript, 
(i.e. not =<supplied>=), without any further markup. 
A hyphen is also printed in case the element =<lb/>= has a =@rend= with the value =hyphen= or when 
a hyphen is typed as such and additionally wrapped in =<c>= with a 
=@type= of the value =hyphen=. 
If a hyphen is wrapped in =<supplied>=, it is treated like
other supplied characters. If it is wrapped in =<me:punct>= (inside of a word) with a
=@type= of the value =supplied= it is treated in the same way as if it 
was wrapped in =<supplied>=, the only difference being that potential information
about the reason for the supplement, i.e. =omitted= or =illegible= is expected
to be the value of =@subtype= instead of =@reason=.

*** Gathering boundaries, hand shift, gaps (when not indicating lost words), space and metamarks 
While metamarks are expected
to only occur outside of words, the markup for gaps, gathering breaks, space and
 hand shift is treated differently
depending on whether the milestone elements =<gb/>=, =<handShift/>=, =<gap/>= and
=<space/>= are found outside of words or within. In the former case, the
elements are simply converted into a line in the output (see example below). 
In the latter case, both a special character is
printed within the word to indicate the exact location (see below) and a line 
is produced preceding the word that contains the milestone element in order
to retain potential additional information from any present attributes. 

#+CAPTION: XML example of a =<space/>= element
#+BEGIN_SRC xml
    <space extent="3" unit="lines" dim="vertical" resp="BS"/>
#+END_SRC

#+BEGIN_SRC orgmode
    | sp |  | 3_lines | vertical |  | BS | | | | | | | | | | | |
#+END_SRC

The first field of that line holds the type designation: Gathering
breaks are marked with =gb=, hand shifts with =hs=, space with =sp=, gap
with =ga= and metamarks with =mm=.

The second field contains an =X= if the element in question
occurs within a word. 

The third field holds different information depending on the element in
question:

-  For =<gb/>= the number is printed unchanged from the attribute =@n=
   (which is expected to be present).
-  For =<handShift/>= the ID of the new scribe is taken from the
   attribute =@new= (which is also expected).
-  For =<space>= and =<gap>= the second field holds information on the
   extent of the space or gap and its unit if encoded in the XML. The
   value for the extent is read from either =@quantity= or =@extent=,
   followed by the value of =@unit=, which is preceded by an underscore
   if present.
-  For =<metamark>=, the second field reads in the value of =@function=
   if present.

If the element in question is =<space>= the fourth field reads in the
value of any present =@dim= attribute (i.e. "horizontal" or "vertical").
For =<metamark>=, the value of any present =@target= attribute is
printed, and for =<gap>=, the value of =@reason=. For the other elements
this field is currently left blank.

The fifth field reads in information of any present =@rend= attribute
on =<metamark>= or =@agent= attribute on =<gap>=.

The sixth field gives the value of any present =@resp= attributes on
both =<gap>= and =<space>=, or =@ana= attribute on =<metamark>=.

The seventh field grabs any textual contents of =<metamark>= (on any level).

The eighth field retains information about potential descendant elements of 
=<metamark>=. In other words, if =<metamark>= holds child elements, this field
 prints for each contained element the element name followed by an underscore,
the name of a potential attribute or attributes, an equal sign and the value of
the attribute or attributes. Finally, the information on an individual 
element is closed by a broken pipe character. If a contained element
does not have any attribute, the stylesheet prints 
"_instant=false" for the non-existing attribute and its value.

The remaining fields are left empty.

*** Names
Words that are names receive an additional code line both in front and
after the line marked as "w". These two lines correspond to beginning and
end tags as in XML and are marked with =b= or =e=, respectively, in the
second field as shown in example (a):

#+CAPTION: (a)
#+BEGIN_SRC xml
    <persName type="forename">
        <w me:msa="xNP gM nS cN sI" lemma="Árni" me:lemma-orig="árni">
            <choice>
                <me:facs>arn<am>&bar;</am>æ</me:facs>
                <me:dipl>arn<ex>n</ex>æ</me:dipl>
                <me:norm>Árni</me:norm>
            </choice>
        </w>
    </persName>
#+END_SRC

#+BEGIN_SRC orgmode
    | PE | b    | AsvTho001 | forename        |      |      |         |    |        |        |                          |   |     |   |   |   |         |   |
    | w  | árni | Árni      | xNP gM nS cN sI | Árni | Árni | arn(n)æ | arn̅æ | 000036 | a2;æ2; | {a:[á,a]}{r:r}{n̅:n}{æ:I}   |   | oic |   |   |   | 168r-03 |   |
    | PE | e    | AsvTho001 | forename        |      |      |         |    |        |        |                          |   |     |   |   |   |         |   |
#+END_SRC

The beginning and end lines are structured in (almost) the same way,
taking into consideration the most common ways of marking up names in
XML. The stylesheet expects that when the plain =<name>= element is
used, it always has at least a =@type= attribute, since it cannot be
processed otherwise. If any naming elements are nested, beginning and
ending lines are only be inserted for the lowest level of naming elements.
In other words, an encoding such as the following (example (b) results in
 the below
code. Please note that any =<w>= that might be contained
in a higher level name element, but is not surrounded by a lower level
element that is comparable to the encoding of the other sibling =<w>=
elements, is treated as if it were not a name.

#+CAPTION: (b)
#+BEGIN_SRC xml
           <w lemma="frú" me:msa="xNC gF nS cN sI">
                <choice>
                    <me:facs></me:facs>
                    <me:dipl>fru</me:dipl>
                    <me:norm>frú</me:norm>
                </choice>
            </w>
    <name type="person" key="HalJon001">
        <persName type="forename">
            <w lemma="hallbera" me:msa="xNP gF nS cG sI">
                <choice>
                    <me:facs></me:facs>
                    <me:dipl>Hallb<ex>er</ex>a</me:dipl>
                    <me:norm>Hallbera</me:norm>
                </choice>
            </w>
        </persName>
        <w lemma="abbadís" me:msa="xNC gF nS cN sI">
            <choice>
                <me:facs></me:facs>
                <me:dipl>abbadis</me:dipl>
                <me:norm>abbadís</me:norm>
            </choice>
        </w>
        <addName type="patronym">
            <w lemma="Jónsdóttir" me:msa="xNC gF nS cN sI">
                <choice>
                    <me:facs></me:facs>
                    <me:dipl>jonsd<ex>ottir</ex></me:dipl>
                    <me:norm>Jónsdóttir</me:norm>
                </choice>
            </w>
        </persName>
    </name>
#+END_SRC

#+BEGIN_SRC orgmode
| w  | frú        |           | xNC gF nS cN sI |     | frú             | fru          |   | 000003 |   |   |   | oic |   |   |   | 003r-02 |   |
| PE | b          | HalJon001 | forename        | np1 | →HalJon001/3-02 |              |   |        |   |   |   |     |   |   |   |      |   |
| w  | hallbera   |           | xNP gF nS cG sI |     | Hallbera        | halb(er)a    |   | 000004 |   |   |   | oic |   |   |   | 003r-02 |   |
| PE | e          | HalJon001 | forename        | np1 |                 |              |   |        |   |   |   |     |   |   |   |      |   |
| w  | abbadís    |           | xNC gF nS cN sI |     | abbadís         | abbadis      |   | 000005 |   |   |   | oic |   |   |   | 003r-02 |   |
| PE | b          | HalJon001 | patronym        | np2 | #HalJon001/3-02 |              |   |        |   |   |   |     |   |   |   |      |   |
| w  | Jónsdóttir |           | xNC gF nS cN sI |     | Jónsdóttir      | jonsd(ottir) |   | 000006 |   |   |   | oic |   |   |   | 003r-02 |   |
| PE | e          | HalJon001 | patronym        | np2 |                 |              |   |        |   |   |   |     |   |   |   |      |   |
#+END_SRC


The first field holds the type designation (the same for beg. and end).
For the elements =<persName>=, =<forename>=, =<surname>=, =<addName>=,
=<roleName>=, =<nameLink>= and =<name>= with @type="name", the type is
given as =PE= (for Personal Name). For the elements =<placeName>= or
=<name>= with @type="place", =PL= is printed, and finally for =<name>=
with @type="org" or "organization" =OR= is inserted.

The second field holds =b= in the beginning line to mark the start of a
name and =e= in the end line.

The third field takes the ID or a reference to an authority file if such
information is encoded. The stylesheet reads in the value of potential
=@ref/@me:ref= or =@key/me:key=. If no key or reference is encoded on
the element in question, XSLT checks if a potential ancestor naming
element carries such information, and inserts it. If not, the field is
left empty.

The fourth field reads in additional information on the type of name if
it is a personal name. Depending on the encoding of the XML, the
information is either directly read from the element name (e.g.
=<forename>=, =<surname>=) or from attributes (e.g. =@type=,
=@subtype=). For place names and other names, no additional information
is expected.

The fifth field is used to indicate when a name consists of several
parts (as in example (b). If the individual name parts are nested inside
a common naming element (=<name>=, =<persName>= or =<placeName>=), the
stylesheet inserts automatically information of where the individual
parts are placed within the common ancestor element as =np1= (= name
part 1), =np2=, =np3= or =np4=.

The following fields are currently not used and are not populated by the
stylesheet. The sixth field will probably be used for references in case
of multi-part names, in order to be able to point from one part to the
other with a (more or less) unique identifier. The example shows a 
pointer in a prelimiary format. *[:TODO: Is this inserted
in EMACS using LISP? ASK sørger for at det sker fra elisp.]*

*** Structural elements

**** Divisions, heads, segments, paragraphs, sentences, line groups, verse lines

The structural elements =<div>=, =<head>=, =<seg>=, =<p>=, =<s>=, =<lg>= and
=<l>= are transformed into beginning and ending lines surrounding the
transcribed text (similar to the markup for names) as shown in the examples.

#+CAPTION: Example of =<div>= in XML input
#+BEGIN_SRC xml
    <div n="2.2" type="chapter" subtype="subchapter">
    ....
    </div>
#+END_SRC

#+BEGIN_SRC orgmode
    | 1 | 2 | 3 |   4 |       5 |          6 | 7 | 8 | 9 | 10 | 11 | 12 | 13 | 14 | 15 | 16 | 17 |
    | d | b | 3 | 2.2 | chapter | subchapter |   |   |   |    |    |    |    |    |    |    |    |
    ....
    | d | e | 3 |     |         |            |   |   |   |    |    |    |    |    |    |    |    |
#+END_SRC


#+CAPTION: Example of =<lg>= in XML input
#+BEGIN_SRC xml
    <lg n="2" type="stanza" met="iambic dimeter" rhyme="ddeeC">
    ....
    </lg>
#+END_SRC

#+BEGIN_SRC orgmode
    | 1  | 2 |  3 |  4 |      5 | 6 | 7 | 8 |              9 | 10 |    11 | 12 | 13 | 14 | 15 | 16 | 17 |
    | lg | b | 11 | 04 | stanza |   |   |   | iambic dimeter |    | ddeeC |    |    |    |    |    |    |
    ...
    | lg | e | 11 |    |        |   |   |   |                |    |       |    |    |    |    |    |    |
#+END_SRC


The first field is occupied by the type designation, i.e. =d= for
=<div>=, =h= for =<head>=, =sg= for =<seg>=, =pa= for =<p>=, =s= for =<s>, =lg= for
=<lg>= or =l= for =<l>=.

The second field contains either =b= to mark a beginning line or =e= for
the end.

The third field holds an internal counter, giving the position of the
element in question in =<body>= (only counting elements of the same name
as self). This internal counter is repeated in the ending line.

The fourth field of a beginning line reads in the value of any present
=@n= attribute. The end line does not repeat this information. For
=<div>= elements the value of =@n= is expected to agree with the =@n= of
the relevant =<msItem>= in the =<msDesc>= part of the header.

The fifth field of a beginning line reads in the value of any present
=@type= attribute. The end line does not repeat this information.

The sixth field of a beginning line reads in the value of any present
=@subtype= attribute. The end line does not repeat this information.

The seventh field of a beginning line reads in the value of any present
=@xml:id= attribute. The end line does not repeat this information.

The eighth field of a beginning line reads in the value of any present
=@rend= attribute. The end line does not repeat this information.

The ninth field of a beginning line reads in the value of any present =@met=
attribute (e.g. on =<lg>= or =<l>= ). The end line does not repeat this information.

The tenth field of a beginning line reads in the value of any present =@real=
attribute (e.g. on =<lg>= or =<l>=). The end line does not repeat this information.

The eleventh field of a beginning line reads in the value of any present =@rhyme=
attribute (e.g. on =<lg>= or =<l>=). The end line does not repeat this information.

The remaining fields are currently left empty.

**** Figures

The produced code for illuminations other than initials (expected to be encoded with =<figure>=
in the XML) is similar to the output for other structural elements as 
 both a beginning and ending line are created. The individual fields, 
however, are populated with slightly different information.
Moreover, any transcription of words inside of =<figure>= are marked as such 
in the seventeeth field (position in source). There, the line number
 (counted internally in the illumination) is preceeded by the letter "f".

#+BEGIN_SRC orgmode
    |  1 | 2 |    3 |    4 |               5 |               6 |         7 |                 8 |           9 |     10 | 11 | 12 | 13 | 14 | 15 | 16 |         17 |
    | fi | b | (ID) | (ID2)| (Title)         | (Iconclass nr.) |    (type) |          (colors) | (technique) | (Hand) |    |    |    |    |    |    | (location) |
    | fi | b |    8 |    9 | Anna selvtredje |          73A221 | full_page | red, blue, yellow |  gold_brush |        |    |    |    |    |    |    | 033v       |   
 ...
    | fi | e | (ID) |      |                 |                 |           |                   |             |        |    |    |    |    |    |    |            |
    | fi | e |    8 |      |                 |                 |           |                   |             |        |    |    |    |    |    |    |            |
#+END_SRC 

 The first field is occupied by the type designation, i.e. =fi= for
=<figure>=.

The second field contains either =b= to mark a beginning line or =e= for
the end.

The third field holds an internal counter, giving the position of the
element =<figure>= in =<body>= as a natural number. This internal counter is 
repeated in the ending line.

The fourth field of a beginning line reads in the value of any present
=@n= attribute of =<figure>=. The end line does not repeat this information.

The fifth field of a beginning line may contain the title of the illumination.
If present, the contents of a descending =<head>= element is read into
this field.

The sixth field of a beginning line may contain an identification of the motif
in form of an Iconclass number, the standard classification system for cultural contents 
(see www.iconclass.org). At present the field is not populated automatically.
 
The seventh field of a beginning line may contain information on the colours used.
At present the field is not populated automatically.

The eighth field of a beginning line may contain information on the artistic technique used.
At present the field is not populated automatically.

The ninth field of a beginning line may contain information on the individaul responsible
for the illumination (if available). Again, this field is currently not populated automatically.

The tenth through sixteenth field are currently unassigned.

The seventeenth field has the location of the illumination, i.e. is reads in the value of 
the directly preceeding =<pb>= (and potentially =<cb>=). In case an illumination expands
 over more than one page or column, this information is expected to be encoded by means of 
 =<pb>= or =<cb>= within =<figure>=. 
The output will then add the additional locations separated by an m-dash.


*** Additions, deletions, supplied, suppressed/surplus, unclear word, quotes, forme work and transposition
Elements that mark editorial or scribal changes or emendations and are treated differently
 depending on whether they concern wholes words or individual letters within a word.
When this kind of markup is found surrounding word-tags in the XML, it is 
transformed into beginning and end lines surrounding the transcribed
text (similar to the markup for names and structural markup). In
addition to that, the word forms in question receive additional
editorial mark-up on all transcriptional levels. If such elements occur
within words, on the other hand, they are converted to the relevant
editorial mark-up (see below) in addition to a single preceding line
that follows the structure of an opening line, but takes =X= in the 
second field.

#+CAPTION: Example of =<supplied>= in XML input
#+BEGIN_SRC xml
    <supplied reason="omitted" resp="FinJon">
    ....
    </supplied>
#+END_SRC

#+BEGIN_SRC orgmode
    | 1  | 2 |  3 | 4 |       5 |      6 | 7 | 8 | 9 | 10 | 11 | 12 | 13 | 14 | 15 | 16 | 17 |
    | su | b | 15 |   | omitted | FinJon |   |   |   |    |    |    |    |    |    |    |    |
    ....
    | su | e | 15 |   |         |        |   |   |   |    |    |    |    |    |    |    |    | 
#+END_SRC

The first field of both the beginning and end line is occupied by the
type designation, i.e. =ad= for =<add>=, =de= for =<del>=, =su= for
=<supplied>=, =uc= for =<unclear>=, =sd= for =<me:suppressed>=,
=<surplus>= (as well as the older element =<me:expunged>=), =q= for
=<quote>=,  =fw= for =<fw>= and =ts= for transpositions, the XML markup of
which differs between pure TEI XML and Menota v. 3.0 conformat encoding.

For transpositions encoded according to the Menota handbook, the stylesheet
expects the elements =<orig>= and =<reg>= within a common =<choice>= element.
While for =<reg>= the attribute =@type= with the value ="transposition"= is 
required, =<orig>= is expected to have an attribute =@rend=. The stylesheet only
reads in the words enclosed in the =<reg>= element and suppresses the contents
of the =<orig>= to avoid duplicates.[fn::Since the stylesheet cannot automatically supply the enclosed 
lines for individual words with the correct numbers for the original word order,
 the XSLT prints additional lines in front of the enclosing
=ts= lines giving the order of words as they occur in =<orig>= on norm-level prefixed with ORDER OF WORDS PRIOR TO TRASPOSITION.]
 For encodings of this
phenomenon according to the TEI guidelines, the stylesheet expects a consecutive 
series of elements of the same name (other than the also expected =<w>=) that each 
have an attribute =@xml:id=, for which it
is able to find the matching values in =@target= (with preceding #) in a
list of =<ptr>= elements that are nested inside a common =<transpose>=
 (anywhere in the XML docuement). Please note that the stylesheet expects all words
within a such sequence to be tagged, even if words in the middle would stay in there place,
i.e. if the manuscript has "word3 word2 word1" all three words need to be tagged instead 
of simply tagging a transposition of word3 and word1. Any present transposition sign
are expected to be encoded with the element =<metamark>= that is nested within
the element that encloses the relevant word or words.[fn::Please note that for this encoding
the stylesheet does currently not correct the order of the words to be transposed but
prints them in the order they occur in the input XML. Further, the stylesheet prints an individual line per element 
to be transposed above the opening line for =ts= that indicates the desired order of words by printing the values of
their associated =@xml:id= attributes prefixed by DESIRED ORDER OF WORDS ACCORDING TO TRANSPOSITION.]

The second field contains either =b= to mark a beginning line or =e= for
the end. If the markup in question occurs within a word, this field
takes =X=.[fn::Since the standards for XML do not have options 
for encoding transposition, the stylesheet does not expect any in-word
encoding on transpositions in XML.]

The third field holds an internal counter, giving the position of the
element in question in =<body>= (only counting elements of the same name
as self). This internal counter is repeated in the end line. Note that 
transpositions do not have such an internal counter, meaning this field
is left empty.[fn::Alex: I dette følger jeg Rasmuses kodning, men er ikke sikker, om det er noget I har diskuteret.]

The fourth field of a beginning line reads in the value of any present
=@type= attribute. The end line does not repeat this information. Note
that this is not the case for transpositions (when encoded according 
to Menota v. 3.0), because the value of =@type= is expected to always be ="transposition"=.

The fifth field of a beginning line reads in the value of any present
=@reason= attribute. The end line does not repeat this information.

The sixth field of a beginning line reads in the value of any present
=@resp= attribute. The end line does not repeat this information.

The seventh field of a beginning line reads in the value of any present
=@hand= attribute. The end line does not repeat this information.
For transpositions encoded according to TEI the value of =@resp=
on any present =<metamark>= element is read in instead.

The eighth field of a beginning line reads in the value of any present
=@rend= attribute. The end line does not repeat this information.
For transpositions encoded according to Menota v.3.0 this line reads in the value
of that attribute on the =<orig>= element. For encodings according to TEI the
content of any present =<metamark>= element within 
the element of choice that is used for marking up a sequence for transposition is read in.
If multiple metamarks are encoded, the stylesheet prints them separated by white spaces.

The ninth field of a beginning line reads in the value of any present
=@place= attribute. The end line does not repeat this information.
For transpositions encoded according to TEI the value of =@place=
on any present =<metamark>= element is read in instead.

The ninth field of a beginning line reads in the value of any present
=@agent= attribute. The end line does not repeat this information.

The tenth field of a beginning line reads in the value of any present
=@source= attribute. The end line does not repeat this information.
For transpositions encoded according to TEI the value of =@source=
on any present =<metamark>= element is read in instead.

The remaining fields are currently left empty.

Please note that for marginalia which are deemed irrelevant for the 
transcription, the markup is the same as for other longer additions
but the transcription is placed in the notes section at the beginning of
each text/chapter and is linked with a unique reference to its location
relative to the main text.

*** Editorial markup for parts of words or inside of words

Where editorial mark-up occurs within words (or applies to punctuation
characters), e.g. to mark individual letters as unclear, added or
deleted, this information is retained. On the one hande, the information
is reproduced on the transcriptional level and in the same place within
the word where it is found in the XML input, by means of special characters. 
Moreover, in order to account for additional information that might be encoded 
in the form of attributes, an extra line is inserted infront of the 
line for the word (just like the beginning line for editorial markup that
applies to several words, but this line is marked with an
=X= in the second field instead of =b= or =e=; see above). 
*[ Note: the plan was to only insert such an additional line, if the element in question has additional attributes. However, currently such a line is inserted in all cases, but 
 if it is empty, it can be removed in elisp.]*

Parts of words that are marked with =<unclear>= are rendered within
curly brackets.

Parts of words that are marked with =<supplied>= are rendered either
inside of wide pointy brackets (if the reason is stated as
@reason="omitted") or inside of square brackets (if the reason is stated
as @reason="illegible"). If no reason is stated, it is assumed to be
"omitted".

Parts of words that are marked with =<add>= are rendered with various
superscript or sublinear slashes depending on the specified place of the
addition:

- @place="margin": ⸍ ⸌
- @place="margin-right: ⸍ ⸌⸌
- @place="margin-left": ⸍⸍ ⸌
- @place="margin-top": ⸌⸌ ⸍⸍
- @place="margin-bot": ⸍⸍ ⸌⸌
- @place="above" or @place="supralinear": ⸌ ⸍
- @place="below" or @place="infralinear": ⸝ ⸜
- @place="inline" or @place="interlinear": ⸜ ⸝

If no placement is indicated with a suitable attribute, by default the
markup for supralinear additions is inserted: ⸌ ⸍.

Words or parts of words that are marked with =<sic>= are rendered with a
preceding exclamation mark and a following upside-down exclamation mark.

Words or parts of words that are marked with =<corr>= are rendered with
a asterisk preceding the entire word.

Parts of words that are marked with =<del>= are rendered inside of
vertical bars with quills turning inwards (⸠ ⸡).

Parts of words that are marked with =<surplus>=, =<me:suppressed>= (or
the older =<me:expunged>=) are rendered inside of vertical bars with
quills facing outwards (⸡ ⸠).

When the milestone element =<gap>= occurs within a 
word, this is indicated by a Euro sign (€).  

When the milestone element  =<space>= occurs within a word, this is 
indicated by a paragraph sign (§).

When the milestone element =<gb>= occurs within a word, this is
indicated by a pound sign (£).

When the milestone element =<handShift>= occurs within a word, 
this is indicated by an at-sign (@).

Parts of words that are marked as abbreviations using =<am>=  are
printed without further markup on the facsimile level (= facs).
If an entire word is marked as abbreviated using =<abbr>=, the word is printed 
inside round parentheses on the facsimile level. For
Menotic XML, the word form is taken from =<me:facs>=, for TEI P5 XML the
form is taken from =<orig>=. In the latter case, any part of a word
marked with =<am>= (or an entire form marked as =<abbr>=) is suppressed on 
the diplomatic level in the output (= dipl).

Parts of words that are marked as expansions using =<ex>= or entire words
that are marked as expanded using =<expan>= are rendered
within parentheses on the diplomatic level (= dipl). For Menotic XML,
the word form is taken from =<me:dipl>=, for TEI P5 XML the form is
taken from =<orig>=. In the latter case, any part of a word that is
marked with =<ex>= (an entire form marked as =<expan>=) is suppressed 
on the facsimile level in the output (= facs). Please note: The import
script does not expect the elements =<ex>= and =<expan>= to occur
inside the same word, but either or.
 




